package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	graph "myapp/graph/generated"
	"myapp/graph/model"
	"myapp/service"
)

// Register is the resolver for the register field.
func (r *userOpsResolver) Register(ctx context.Context, obj *model.UserOps, input model.NewUser) (string, error) {
	s := service.GetTransaction()
	defer func() {
		if r := recover(); r != nil {
			s.Rollback(r)
		}
	}()

	resp, err := s.UserRegister(ctx, input)
	s.Commit()

	return resp, err
}

// Login is the resolver for the login field.
func (r *userOpsResolver) Login(ctx context.Context, obj *model.UserOps, input model.LoginInput) (*model.LoginResponse, error) {
	s := service.GetService()
	return s.UserLogin(ctx, input)
}

// Me is the resolver for the me field.
func (r *userQueryResolver) Me(ctx context.Context, obj *model.UserQuery) (*model.User, error) {
	s := service.GetService()
	return s.UserGetMe(ctx)
}

// UserOps returns graph.UserOpsResolver implementation.
func (r *Resolver) UserOps() graph.UserOpsResolver { return &userOpsResolver{r} }

// UserQuery returns graph.UserQueryResolver implementation.
func (r *Resolver) UserQuery() graph.UserQueryResolver { return &userQueryResolver{r} }

type userOpsResolver struct{ *Resolver }
type userQueryResolver struct{ *Resolver }
